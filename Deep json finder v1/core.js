mermaid.initialize({startOnLoad:!0});let jsonData=null,pathFinder=new JSONPathFinder,currentInputMethod="file";const methodButtons={file:document.getElementById("methodFile"),api:document.getElementById("methodApi"),text:document.getElementById("methodText")},inputSections={file:document.getElementById("inputFile"),api:document.getElementById("inputApi"),text:document.getElementById("inputText")};function switchInputMethod(t){Object.values(methodButtons).forEach((t=>t.classList.remove("ring-2","ring-offset-2","ring-blue-500"))),methodButtons[t].classList.add("ring-2","ring-offset-2","ring-blue-500"),Object.values(inputSections).forEach((t=>t.classList.add("hidden"))),inputSections[t].classList.remove("hidden"),currentInputMethod=t,updateButtonState(),updateCurrentMethodDisplay()}function updateCurrentMethodDisplay(){const t=document.getElementById("currentMethod");t.textContent={file:"üìÅ File Upload Ready",api:"üåê API Input Ready",text:"‚úèÔ∏è Text Input Ready"}[currentInputMethod],t.classList.remove("hidden")}Object.entries(methodButtons).forEach((([t,e])=>{e.addEventListener("click",(()=>switchInputMethod(t)))}));const jsonFileInput=document.getElementById("jsonFile"),apiUrlInput=document.getElementById("apiUrl"),jsonTextInput=document.getElementById("jsonText"),targetValueInput=document.getElementById("targetValue"),findPathsButton=document.getElementById("findPaths"),buttonText=document.getElementById("buttonText"),loadingSpinner=document.getElementById("loadingSpinner"),resultsDiv=document.getElementById("results"),pathsDiv=document.getElementById("paths"),pathFlowchartsDiv=document.getElementById("pathFlowcharts"),pathSelect=document.getElementById("pathSelect"),pathSelectionDiv=document.getElementById("pathSelection"),errorDiv=document.getElementById("error");async function loadJsonFromFile(t){return new Promise(((e,n)=>{const a=new FileReader;a.onload=t=>{try{e(JSON.parse(t.target.result))}catch(t){n(new Error("Invalid JSON file"))}},a.onerror=()=>n(new Error("Failed to read file")),a.readAsText(t)}))}async function loadJsonFromApi(t){try{const e=await fetch(t);if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);return await e.json()}catch(t){if("TypeError"===t.name&&t.message.includes("fetch"))throw new Error("Failed to fetch. Check URL and CORS settings.");throw t}}function loadJsonFromText(t){try{return JSON.parse(t)}catch(t){throw new Error("Invalid JSON format")}}function showLoading(t){loadingSpinner.classList.toggle("hidden",!t),findPathsButton.disabled=t}function updateButtonState(){const t=null!==jsonData,e=""!==targetValueInput.value.trim();if("file"===currentInputMethod)findPathsButton.disabled=!t||!e;else if("api"===currentInputMethod){const n=""!==apiUrlInput.value.trim();findPathsButton.disabled=!t&&!n||!e}else if("text"===currentInputMethod){const n=""!==jsonTextInput.value.trim();findPathsButton.disabled=!t&&!n||!e}}jsonFileInput.addEventListener("change",(async t=>{const e=t.target.files[0];if(e){showLoading(!0),buttonText.textContent="Loading...",errorDiv.classList.add("hidden");try{jsonData=await loadJsonFromFile(e),updateCurrentMethodDisplay(),updateButtonState()}catch(t){errorDiv.textContent=t.message,errorDiv.classList.remove("hidden"),jsonData=null}finally{showLoading(!1),buttonText.textContent="Find Paths"}}})),apiUrlInput.addEventListener("input",updateButtonState),apiUrlInput.addEventListener("keypress",(t=>{"Enter"===t.key&&findPathsButton.click()})),jsonTextInput.addEventListener("input",updateButtonState),targetValueInput.addEventListener("input",updateButtonState),findPathsButton.addEventListener("click",(async()=>{const t=targetValueInput.value.trim(),e=document.querySelector('input[name="searchType"]:checked').value;if(!jsonData){showLoading(!0),buttonText.textContent="Loading JSON...",errorDiv.classList.add("hidden");try{if("api"===currentInputMethod&&apiUrlInput.value.trim())jsonData=await loadJsonFromApi(apiUrlInput.value.trim());else{if("text"!==currentInputMethod||!jsonTextInput.value.trim())throw new Error("No JSON data available");jsonData=loadJsonFromText(jsonTextInput.value.trim())}updateCurrentMethodDisplay()}catch(t){return errorDiv.textContent=t.message,errorDiv.classList.remove("hidden"),showLoading(!1),void(buttonText.textContent="Find Paths")}}if(t)try{showLoading(!0),buttonText.textContent="Finding Paths...",pathFinder.findPaths(jsonData,t,e);const n=pathFinder.getPaths();if(pathsDiv.innerHTML="",pathFlowchartsDiv.innerHTML="",pathSelect.innerHTML='<option value="">Select a path</option>',pathSelectionDiv.classList.add("hidden"),0===n.length)pathsDiv.innerHTML='<p class="text-gray-400">No paths found for the target.</p>',pathFlowchartsDiv.innerHTML='<div class="mermaid">graph TD A[No Paths Found]</div>';else if(n.forEach(((t,e)=>{const n=document.createElement("div");n.className="mb-2 p-3 bg-gray-800 rounded-md border-l-4 "+("value"===t.type?"border-green-500":"key"===t.type?"border-orange-500":"border-purple-500"),n.innerHTML=`\n                            <div class="flex justify-between items-center mb-2">\n                                <span class="text-gray-300 font-semibold">Path ${e+1}:</span>\n                                <span class="search-type-badge ${"value"===t.type?"type-value":"key"===t.type?"type-key":"type-index"}">\n                                    ${"value"===t.type?"üíé VALUE":"key"===t.type?"üîë KEY":"üìç INDEX"}\n                                </span>\n                            </div>\n                            <div>${pathFinder.formatPath(t.path,t.type)}</div>\n                        `,pathsDiv.appendChild(n);const a=document.createElement("option");a.value=e,a.textContent=`Path ${e+1} (${t.type.toUpperCase()})`,pathSelect.appendChild(a)})),n.length>1&&pathSelectionDiv.classList.remove("hidden"),n.length>0){const t=n[0],e=pathFinder.generatePathFlowchart(t.path,0,t.type);pathFlowchartsDiv.innerHTML=`<div class="mermaid">${e}</div>`,mermaid.run({nodes:[pathFlowchartsDiv.querySelector(".mermaid")]})}resultsDiv.classList.remove("hidden"),pathsDiv.style.display="block"}catch(t){errorDiv.textContent="Error processing JSON",errorDiv.classList.remove("hidden")}finally{showLoading(!1),buttonText.textContent="Find Paths"}})),pathSelect.addEventListener("change",(()=>{const t=parseInt(pathSelect.value);if(isNaN(t))pathFlowchartsDiv.innerHTML="";else{pathFlowchartsDiv.innerHTML="";const e=pathFinder.getPath(t);if(e){const n=pathFinder.generatePathFlowchart(e.path,t,e.type);pathFlowchartsDiv.innerHTML=`<div class="mermaid">${n}</div>`,mermaid.run({nodes:[pathFlowchartsDiv.querySelector(".mermaid")]})}}})),switchInputMethod("file");
