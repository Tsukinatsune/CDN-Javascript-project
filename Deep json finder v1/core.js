mermaid.initialize({startOnLoad:!0,theme:'dark'});function findInDeepStructure(data,target,path=[],results=[]){if(Array.isArray(data)){data.forEach((item,index)=>{const currentPath=[...path,index];if(item===target||(item===Number(target)&&!isNaN(target))){results.push(currentPath)}
if(Array.isArray(item)||(item&&typeof item==='object')){findInDeepStructure(item,target,currentPath,results)}})}else if(data&&typeof data==='object'){Object.entries(data).forEach(([key,value])=>{const currentPath=[...path,key];if(value===target||(value===Number(target)&&!isNaN(target))){results.push(currentPath)}
if(Array.isArray(value)||(value&&typeof value==='object')){findInDeepStructure(value,target,currentPath,results)}})}
return results}
function getValueFromPath(jsonData,path){let current=jsonData;for(const step of path){if(current===null||current===undefined){return undefined}
current=current[step]}
return current}
function formatPath(path){return path.map((step,i)=>{const isNumber=typeof step==='number';const stepText=isNumber?step:step;return i===0?`<span class="text-purple-400">top</span>`:`<span class="text-blue-400"> -> </span><span class="${isNumber ? 'text-green-400' : 'text-yellow-400'}">${stepText}</span>`}).join('')}
function generatePathFlowchart(path,pathIndex){let mermaidCode=`graph TD\n`;let previousNode=`Start_${pathIndex}`;mermaidCode+=`    ${previousNode}[Start: top]\n`;path.forEach((step,stepIndex)=>{const isNumber=typeof step==='number';const stepText=isNumber?`Index: ${step}`:`Key: ${step}`;const currentNode=`P${pathIndex}_S${stepIndex}`;mermaidCode+=`    ${currentNode}["${stepText}"]\n`;if(stepIndex===0){mermaidCode+=`    ${previousNode} --> ${currentNode}\n`}else{mermaidCode+=`    ${previousNode} --> ${currentNode}\n`}
previousNode=currentNode});const targetNode=`Target_${pathIndex}`;mermaidCode+=`    ${targetNode}[Target Value: ${targetValueInput.value.trim()}]\n`;mermaidCode+=`    ${previousNode} --> ${targetNode}\n`;return mermaidCode}
const jsonFileInput=document.getElementById('jsonFile');const targetValueInput=document.getElementById('targetValue');const findPathsButton=document.getElementById('findPaths');const resultsDiv=document.getElementById('results');const pathsDiv=document.getElementById('paths');const pathFlowchartsDiv=document.getElementById('pathFlowcharts');const pathSelect=document.getElementById('pathSelect');const pathSelectionDiv=document.getElementById('pathSelection');const errorDiv=document.getElementById('error');let jsonData=null;let paths=[];function updateButtonState(){findPathsButton.disabled=!jsonData||!targetValueInput.value.trim()}
jsonFileInput.addEventListener('change',(event)=>{const file=event.target.files[0];if(!file)return;const reader=new FileReader();reader.onload=(e)=>{try{jsonData=JSON.parse(e.target.result);errorDiv.classList.add('hidden');updateButtonState()}catch(err){errorDiv.textContent='Invalid JSON file';errorDiv.classList.remove('hidden');jsonData=null;updateButtonState()}};reader.readAsText(file)});targetValueInput.addEventListener('input',updateButtonState);findPathsButton.addEventListener('click',()=>{const target=targetValueInput.value.trim();if(!jsonData||!target)return;try{paths=findInDeepStructure(jsonData,target);pathsDiv.innerHTML='';pathFlowchartsDiv.innerHTML='';pathSelect.innerHTML='<option value="">Select a path</option>';pathSelectionDiv.classList.add('hidden');if(paths.length===0){pathsDiv.innerHTML='<p class="text-gray-400">No paths found for the target value.</p>';pathFlowchartsDiv.innerHTML='<div class="mermaid">graph TD\nA[No Paths Found]</div>'}else{paths.forEach((path,i)=>{const pathElement=document.createElement('div');pathElement.className='mb-2 p-2 bg-gray-800 rounded-md';pathElement.innerHTML=`<span class="text-gray-300 font-semibold">Path ${i + 1}:</span> ${formatPath(path)}`;pathsDiv.appendChild(pathElement);const option=document.createElement('option');option.value=i;option.textContent=`Path ${i + 1}`;pathSelect.appendChild(option)});if(paths.length>1){pathSelectionDiv.classList.remove('hidden')}
if(paths.length>0){const mermaidCode=generatePathFlowchart(paths[0],0);pathFlowchartsDiv.innerHTML=`<div class="mermaid">${mermaidCode}</div>`;const targetValue=getValueFromPath(jsonData,paths[0]);const valueDisplay=document.createElement('div');valueDisplay.className='mt-4 p-2 bg-gray-800 rounded-md text-gray-100';valueDisplay.textContent=`Target Value: ${targetValue !== undefined ? JSON.stringify(targetValue) : 'Not found'}`;pathFlowchartsDiv.appendChild(valueDisplay);mermaid.run({nodes:[pathFlowchartsDiv.querySelector('.mermaid')]})}}
resultsDiv.classList.remove('hidden');errorDiv.classList.add('hidden')}catch(err){errorDiv.textContent='Error processing JSON';errorDiv.classList.remove('hidden');resultsDiv.classList.add('hidden')}});pathSelect.addEventListener('change',()=>{const selectedPathIndex=parseInt(pathSelect.value);if(!isNaN(selectedPathIndex)){pathFlowchartsDiv.innerHTML='';const mermaidCode=generatePathFlowchart(paths[selectedPathIndex],selectedPathIndex);pathFlowchartsDiv.innerHTML=`<div class="mermaid">${mermaidCode}</div>`;const targetValue=getValueFromPath(jsonData,paths[selectedPathIndex]);const valueDisplay=document.createElement('div');valueDisplay.className='mt-4 p-2 bg-gray-800 rounded-md text-gray-100';valueDisplay.textContent=`Target Value: ${targetValue !== undefined ? JSON.stringify(targetValue) : 'Not found'}`;pathFlowchartsDiv.appendChild(valueDisplay);mermaid.run({nodes:[pathFlowchartsDiv.querySelector('.mermaid')]})}else{pathFlowchartsDiv.innerHTML=''}})